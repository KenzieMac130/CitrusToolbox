/*
   Copyright 2022 MacKenzie Strand

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

#include "utilities/common.ctsh"
#include "bindpoints.ctsh"

/* CT_COMPILE_INFO: 
{
	"fx":[
		{
			"name":"TRIS",
			"stages":["VERTEX_SHADER","FRAGMENT_SHADER"],
			"defines":{"IM3D_TRIS":"1"}
		},
		{
			"name":"LINES",
			"stages":["VERTEX_SHADER","FRAGMENT_SHADER"],
			"defines":{"IM3D_LINES":"1"}
		},
		{
			"name":"POINTS",
			"stages":["VERTEX_SHADER","FRAGMENT_SHADER"],
			"defines":{"IM3D_POINTS":"1"}
		}
	]
}
*/

#define CT_ATTRIBUTES_FRAG_IN
#include "utilities/attributes.ctsh"
CT_ATTRIBUTES_BEGIN()
CT_ATTRIBUTES_VAR(0,float4,vertexColor)
CT_ATTRIBUTES_END()
#undef CT_ATTRIBUTES_FRAG_IN

#define CT_ATTRIBUTES_FRAG_OUT
#include "utilities/attributes.ctsh"
CT_ATTRIBUTES_BEGIN()
CT_ATTRIBUTES_VAR(0,float4,outColor)
CT_ATTRIBUTES_END()
#undef CT_ATTRIBUTES_FRAG_OUT

#ifdef VERTEX_SHADER
struct sVertexData {
    float4 posScale;
    uint icolor;
};

CT_STORAGE_BUFFER_ARRAY(sViewBuffer, viewBuffers, {
    float4x4 viewProj;
	float2 viewScale;
})

CT_STORAGE_BUFFER_ARRAY(sVertexBuffer, vertexBuffers, {
    sVertexData data[];
})

CT_MAIN(){
	sVertexData vertex = vertexBuffers[CT_KEYLIME_BIND_BUFFER_IM3D_VERTICES].data[CT_VERTEX_INDEX];
	float4x4 viewProj = viewBuffers[CT_KEYLIME_BIND_BUFFER_IM3D_VIEW].viewProj;

	float4 position = CT_MMULV(viewProj, float4(vertex.posScale.xyz, 1.0));
	float4 color = unpackUnorm4x8(vertex.icolor).abgr;

    CT_SET_ATTRIBUTE(vertexColor,color);
    CT_SET_POSITION(position);
	#ifdef IM3D_POINTS
	CT_SET_POINT_SIZE(8.0);
	#endif
}
#endif

#ifdef FRAGMENT_SHADER
CT_MAIN() {
    CT_GET_ATTRIBUTE(float4,vertexColor)
	CT_SET_ATTRIBUTE(outColor,vertexColor);
}
#endif 