from assetcompiler.GUIDLookup import assetGuidLookup
from assetcompiler.types.Base import CitrusAssetCompileTask

class Task(CitrusAssetCompileTask):
	name = "NicknameGen"
	globInfo = ['DataNicknames.json']
	codegenPath = ''
	
	def resolve_file_names(self, declarations):
		return ['NICKNAME.TEMP']

	def get_asset_type(self, relativePath):
		return "legacy nickname"
	
	def run(self):
		nicknames = self.inputs[0].read_json()
		text =\
"""/* Generated by Nicknames.py in the asset compiler */
#include <stdint.h>
#include <assert.h>

/* https://xueyouchao.github.io/2016/11/16/CompileTimeString/ */
template<size_t N>
constexpr inline size_t
CT_COMPILE_HORNER_HASH_CONSTEXPR(size_t prime, const char (&str)[N], size_t Len = N - 1) {
   return (Len <= 1) ? str[0]
                     : (prime * CT_COMPILE_HORNER_HASH_CONSTEXPR(prime, str, Len - 1) +
                        str[Len - 1]);
}
#define CT_COMPILE_HORNER_HASH(_STR) (CT_COMPILE_HORNER_HASH_CONSTEXPR(31, _STR))

const char* ctGetDataGuidFromHash(size_t hash){
   switch(hash) {
"""
		for key, value in nicknames.items():
			guid = assetGuidLookup(value["path"],value["out"])
			text +=\
			'      case CT_COMPILE_HORNER_HASH("' + key + '"):\n' +\
			'         return "' + guid + '";\n'
			
		text += \
"""      default:
         assert(0);
         return "";
   }
}"""
		path = self.env.codegenPath+'DataNicknames.cpp'
		print(path)
		f = open(path, "w")
		f.write(text)
		f.close()
		self.outputs[0].write(text)
		print(self)
		return 0